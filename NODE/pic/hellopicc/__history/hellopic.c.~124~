#INCLUDE <16F887.H>
#DEVICE ADC=10
#INCLUDE <STRING.H>
#INCLUDE <STDLIB.H>
#INCLUDE <STDIO.H>
#INCLUDE <MATH.H>
/*
int atoi(const char *s) : sting --> sô nguyên
long atol(const char *s) : string --> sô nguyên dài
float atof(const char *s) : string --> sô thuc
*/
#FUSES NOWDT, PUT, HS
#USE DELAY(CLOCK=20M)
#USE RS232(BAUD=9600,XMIT=PIN_E0,RCV=PIN_E1)

UNSIGNED INT16 KQADC;
INT8 DATA=0;
CHAR CHUOI[30]="chao moi nguoi";
//----------------------------------------------------------------------//
//-------------------------------TO STRING------------------------------//

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j) {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
  
// Converts a given integer x to string str[]. 
// d is the number of digits required in the output. 
// If d is more than the number of digits in x, 
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x) {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }
  
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
  
    reverse(str, i);
    str[i] = '\0';
    return i;
}
  
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
    // Extract integer part
    int ipart = (int)n;
  
    // Extract floating part
    float fpart = n - (float)ipart;
  
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
  
    // check for display option after point
    if (afterpoint != 0) {
        res[i] = '.'; // add dot
  
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter 
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
  
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
  

//----------------------------------------------------------------------//
//----------------------------------------------------------------------//
VOID ADC_READ(){
   KQADC = 0;    
   FOR (INT I=0; I<100; I++)
   {
      KQADC=KQADC+READ_ADC();
      DELAY_MS(1);
   }
   KQADC = KQADC/(100*2.046);

}

VOID SS(){
      IF (KQADC > 26){
          OUTPUT_D(0xF0);
          PUTC('O');
          PUTC('N');
          DELAY_MS(200);
      }
      ELSE{
         OUTPUT_D(0x0F);
         PRINTF(KQADC);
         DELAY_MS(200);
         }   

}

VOID MAIN(){
   SET_TRIS_D(0X00);
   SET_TRIS_C(0XF0);
   SETUP_ADC(ADC_CLOCK_DIV_8);
   SETUP_ADC_PORTS(sAN0);
   SET_ADC_CHANNEL(0);     
   OUTPUT_LOW(PIN_D0);
   OUTPUT_D(0X00);
   
   
   WHILE(TRUE){
      ADC_READ();
      DATA = KQADC;
      //ITOA(KQADC, 10, CHUOI );
      ftoa(2.34567, CHUOI, 3);
      PRINTF(CHUOI);
      DELAY_MS(200);
      DELAY_MS(200);
   } 
}

